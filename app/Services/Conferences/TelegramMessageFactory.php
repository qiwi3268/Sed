<?php

declare(strict_types=1);

namespace App\Services\Conferences;

use App\Models\Conferences\Conference;
use App\Models\User;
use App\Lib\Singles\Inflector;
use App\Lib\RouteSynchronization\RouteSynchronizer;
use App\Jobs\Conferences\ProcessConferencesBeforeStarting;


final class TelegramMessageFactory
{

    public static function getCreatedText(Conference $conference): string
    {
        return self::getText($conference, 'üìå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–≤–µ—â–∞–Ω–∏–µ');
    }


    public static function getUpdatedText(Conference $conference): string
    {
        return self::getText($conference, '‚ùó –°–æ–≤–µ—â–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ');
    }


    public static function getBeforeStartingText(Conference $conference): string
    {
        $inflector = new Inflector('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç');

        return self::getText(
            $conference,
            // –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è, —Ç.–∫. –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è,
            // —á—Ç–æ ProcessConferencesBeforeStarting –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            "‚è∞ –î–æ –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è {$inflector->inflect(ProcessConferencesBeforeStarting::MINUTES_BEFORE_START)}"
        );
    }


    private static function getText(Conference $conference, string $subject): string
    {
        $url = app(RouteSynchronizer::class)->generateAbsoluteUrl(
            'conferences.navigation.items.my.planned'
        );

        $vksHref = is_null($conference->vks_href)
            ? ''
            : "[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ]($conference->vks_href)";

        $vksConnectionResponsible = is_null($conference->vks_connection_responsible_id)
            ? ''
            : "*–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:* {$conference->vksConnectionResponsible->fio->getShortFio()}";

        $members = $conference->members
            ->sortCompanyUsers()
            ->map(fn(User $u): string => "‚óè  {$u->fio->getShortFio()}")
            ->implode(PHP_EOL);

        $outerMembers = is_null($conference->outer_members)
            ? ''
            : "*–í–Ω–µ—à–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:* $conference->outer_members";

        $comment = is_null($conference->comment)
            ? ''
            : "*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* $conference->comment";

        $text = <<<MD
$subject

*–¢–µ–º–∞:* $conference->topic

*–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:* {$conference->start_at->format('d.m.Y H:i')}
*–§–æ—Ä–º–∞:* {$conference->miscConferenceFormName->name}
*–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* {$conference->miscConferenceLocationName->name}

$vksHref
$vksConnectionResponsible

*–£—á–∞—Å—Ç–Ω–∏–∫–∏:*
$members

$outerMembers
$comment

[–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–≤–µ—â–∞–Ω–∏–π]($url)
MD;

        return str_remove_duplicate_nl($text);
    }
}
