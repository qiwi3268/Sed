<?php

declare(strict_types=1);

namespace App\Services\Telegram\Handlers\Interfaces;

use Exception;
use RuntimeException;
use Illuminate\Database\QueryException;
use App\Repositories\Exceptions\RepositoryException;
use App\Services\Telegram\Exceptions\TelegramNoticeException;
use App\Services\Telegram\Exceptions\TelegramErrorException;

use Illuminate\Support\Facades\Log;
use App\Models\Telegram\Polls\TelegramPoll;
use WeStacks\TeleBot\Interfaces\UpdateHandler;


trait TelegramHandlerTrait
{
    protected string $targetChatId;


    /**
     * –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
     */
    protected array $dontLog = [
        TelegramNoticeException::class
    ];


    public function handle(): void
    {
        $this->targetChatId = $this->getTargetChatId();

        try {
            $this->doHandle();
        } catch (Exception $e) {

            if (!in_array($e::class, $this->dontLog)) {
                Log::channel('telegram')->error($e, [
                    'telegram_update' => $this->update
                ]);
            }

            if (!$this->handleException($e)) {

                if ($e instanceof TelegramNoticeException) {
                    $this->sendNoticeMessageToTargetChat($e->getMessage());
                } elseif ($e instanceof TelegramErrorException) {
                    $this->sendErrorMessageToTargetChat($e->getMessage());
                } elseif ($e instanceof QueryException || $e instanceof RepositoryException) {
                    $this->sendErrorMessageToTargetChat('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
                } else {
                    $this->sendErrorMessageToTargetChat('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            }
        }
    }


    /**
     * –°–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Ç–∞,
     * –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     *
     * @throws RuntimeException
     */
    protected function getTargetChatId(): string
    {
        /** @var UpdateHandler $this */
        $update = $this->update;

        if ($update->is('message')) {

            // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤ —ç—Ç–æ—Ç –∂–µ —á–∞—Ç
            return (string) $update->message->chat->id;

        } elseif ($update->is('poll_answer')) {

            // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å, —Ç–æ id —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update.
            // –ü–æ—ç—Ç–æ–º—É id –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ë–î
            return TelegramPoll::whereTgPollId($update->poll_answer->poll_id)
                ->firstOrFail('tg_chat_id')
                ->tg_chat_id;

        } else {
            throw new RuntimeException("–ú–µ—Ç–æ–¥ TelegramHandlerTrait::getTargetChatId –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: '{$update->type()}'");
        }
    }


    abstract protected function doHandle(): void;


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫—à–µ–µ –≤ –º–µ—Ç–æ–¥–µ doHandle
     *
     * @return bool –≤–µ—Ä–Ω—É—Ç—å false, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞—Å—å
     */
    protected function handleException(Exception $e): bool
    {
        return false;
    }


    /*
    |--------------------------------------------------------------------------
    | –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    |--------------------------------------------------------------------------
    */


    protected function sendErrorMessageToTargetChat(string $text): void
    {
        $markdown = <<<MD
*–û—à–∏–±–∫–∞!* üôÄ

$text
MD;
        $this->sendMessageToTargetChat($markdown, ['parse_mode' => 'markdown']);
    }


    protected function sendSuccessMessageToTargetChat(string $text): void
    {
        $markdown = <<<MD
*–£—Å–ø–µ—Ö!* ü•≥

$text
MD;
        $this->sendMessageToTargetChat($markdown, ['parse_mode' => 'markdown']);
    }


    protected function sendNoticeMessageToTargetChat(string $text): void
    {
        $markdown = <<<MD
*–í–Ω–∏–º–∞–Ω–∏–µ*‚ùóÔ∏è

$text
MD;
        $this->sendMessageToTargetChat($markdown, ['parse_mode' => 'markdown']);
    }


    protected function sendMessageToTargetChat(string $text, array $parameters = []): void
    {
        $this->sendMessage(array_merge([
            'chat_id' => $this->targetChatId,
            'text'    => $text
        ], $parameters));
    }
}
